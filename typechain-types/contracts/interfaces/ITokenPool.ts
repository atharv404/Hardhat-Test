/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ITokenPoolInterface extends Interface {
  getFunction(
    nameOrSignature: "getPoolBalance" | "initiateSwap" | "processIncomingSwap"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LiquidityAdded"
      | "LiquidityRemoved"
      | "MaxTransactionAmountUpdated"
      | "SwapCompleted"
      | "SwapInitiated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getPoolBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateSwap",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processIncomingSwap",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processIncomingSwap",
    data: BytesLike
  ): Result;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityRemovedEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxTransactionAmountUpdatedEvent {
  export type InputTuple = [newAmount: BigNumberish];
  export type OutputTuple = [newAmount: bigint];
  export interface OutputObject {
    newAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapCompletedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [token: string, amount: bigint, recipient: string];
  export interface OutputObject {
    token: string;
    amount: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapInitiatedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    destinationChain: BigNumberish,
    recipient: AddressLike,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    amount: bigint,
    destinationChain: bigint,
    recipient: string,
    fee: bigint
  ];
  export interface OutputObject {
    token: string;
    amount: bigint;
    destinationChain: bigint;
    recipient: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITokenPool extends BaseContract {
  connect(runner?: ContractRunner | null): ITokenPool;
  waitForDeployment(): Promise<this>;

  interface: ITokenPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPoolBalance: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  initiateSwap: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      destinationChain: BigNumberish,
      recipient: AddressLike
    ],
    [void],
    "payable"
  >;

  processIncomingSwap: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPoolBalance"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initiateSwap"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      destinationChain: BigNumberish,
      recipient: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "processIncomingSwap"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityRemoved"
  ): TypedContractEvent<
    LiquidityRemovedEvent.InputTuple,
    LiquidityRemovedEvent.OutputTuple,
    LiquidityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MaxTransactionAmountUpdated"
  ): TypedContractEvent<
    MaxTransactionAmountUpdatedEvent.InputTuple,
    MaxTransactionAmountUpdatedEvent.OutputTuple,
    MaxTransactionAmountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SwapCompleted"
  ): TypedContractEvent<
    SwapCompletedEvent.InputTuple,
    SwapCompletedEvent.OutputTuple,
    SwapCompletedEvent.OutputObject
  >;
  getEvent(
    key: "SwapInitiated"
  ): TypedContractEvent<
    SwapInitiatedEvent.InputTuple,
    SwapInitiatedEvent.OutputTuple,
    SwapInitiatedEvent.OutputObject
  >;

  filters: {
    "LiquidityAdded(address,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "LiquidityRemoved(address,uint256)": TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;
    LiquidityRemoved: TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;

    "MaxTransactionAmountUpdated(uint256)": TypedContractEvent<
      MaxTransactionAmountUpdatedEvent.InputTuple,
      MaxTransactionAmountUpdatedEvent.OutputTuple,
      MaxTransactionAmountUpdatedEvent.OutputObject
    >;
    MaxTransactionAmountUpdated: TypedContractEvent<
      MaxTransactionAmountUpdatedEvent.InputTuple,
      MaxTransactionAmountUpdatedEvent.OutputTuple,
      MaxTransactionAmountUpdatedEvent.OutputObject
    >;

    "SwapCompleted(address,uint256,address)": TypedContractEvent<
      SwapCompletedEvent.InputTuple,
      SwapCompletedEvent.OutputTuple,
      SwapCompletedEvent.OutputObject
    >;
    SwapCompleted: TypedContractEvent<
      SwapCompletedEvent.InputTuple,
      SwapCompletedEvent.OutputTuple,
      SwapCompletedEvent.OutputObject
    >;

    "SwapInitiated(address,uint256,uint16,address,uint256)": TypedContractEvent<
      SwapInitiatedEvent.InputTuple,
      SwapInitiatedEvent.OutputTuple,
      SwapInitiatedEvent.OutputObject
    >;
    SwapInitiated: TypedContractEvent<
      SwapInitiatedEvent.InputTuple,
      SwapInitiatedEvent.OutputTuple,
      SwapInitiatedEvent.OutputObject
    >;
  };
}
