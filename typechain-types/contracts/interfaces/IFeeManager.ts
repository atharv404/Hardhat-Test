/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IFeeManagerInterface extends Interface {
  getFunction(
    nameOrSignature: "calculateFee" | "isEligibleForDiscount" | "processFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DiscountTokenUpdated"
      | "FeeCollected"
      | "FeeWithdrawn"
      | "FeesUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isEligibleForDiscount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processFee",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEligibleForDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "processFee", data: BytesLike): Result;
}

export namespace DiscountTokenUpdatedEvent {
  export type InputTuple = [token: AddressLike, minimumBalance: BigNumberish];
  export type OutputTuple = [token: string, minimumBalance: bigint];
  export interface OutputObject {
    token: string;
    minimumBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeCollectedEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeWithdrawnEvent {
  export type InputTuple = [
    token: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, recipient: string, amount: bigint];
  export interface OutputObject {
    token: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdatedEvent {
  export type InputTuple = [
    newBaseFee: BigNumberish,
    newDiscountedFee: BigNumberish
  ];
  export type OutputTuple = [newBaseFee: bigint, newDiscountedFee: bigint];
  export interface OutputObject {
    newBaseFee: bigint;
    newDiscountedFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFeeManager extends BaseContract {
  connect(runner?: ContractRunner | null): IFeeManager;
  waitForDeployment(): Promise<this>;

  interface: IFeeManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateFee: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  isEligibleForDiscount: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  processFee: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateFee"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEligibleForDiscount"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "processFee"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DiscountTokenUpdated"
  ): TypedContractEvent<
    DiscountTokenUpdatedEvent.InputTuple,
    DiscountTokenUpdatedEvent.OutputTuple,
    DiscountTokenUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeCollected"
  ): TypedContractEvent<
    FeeCollectedEvent.InputTuple,
    FeeCollectedEvent.OutputTuple,
    FeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "FeeWithdrawn"
  ): TypedContractEvent<
    FeeWithdrawnEvent.InputTuple,
    FeeWithdrawnEvent.OutputTuple,
    FeeWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "FeesUpdated"
  ): TypedContractEvent<
    FeesUpdatedEvent.InputTuple,
    FeesUpdatedEvent.OutputTuple,
    FeesUpdatedEvent.OutputObject
  >;

  filters: {
    "DiscountTokenUpdated(address,uint256)": TypedContractEvent<
      DiscountTokenUpdatedEvent.InputTuple,
      DiscountTokenUpdatedEvent.OutputTuple,
      DiscountTokenUpdatedEvent.OutputObject
    >;
    DiscountTokenUpdated: TypedContractEvent<
      DiscountTokenUpdatedEvent.InputTuple,
      DiscountTokenUpdatedEvent.OutputTuple,
      DiscountTokenUpdatedEvent.OutputObject
    >;

    "FeeCollected(address,uint256)": TypedContractEvent<
      FeeCollectedEvent.InputTuple,
      FeeCollectedEvent.OutputTuple,
      FeeCollectedEvent.OutputObject
    >;
    FeeCollected: TypedContractEvent<
      FeeCollectedEvent.InputTuple,
      FeeCollectedEvent.OutputTuple,
      FeeCollectedEvent.OutputObject
    >;

    "FeeWithdrawn(address,address,uint256)": TypedContractEvent<
      FeeWithdrawnEvent.InputTuple,
      FeeWithdrawnEvent.OutputTuple,
      FeeWithdrawnEvent.OutputObject
    >;
    FeeWithdrawn: TypedContractEvent<
      FeeWithdrawnEvent.InputTuple,
      FeeWithdrawnEvent.OutputTuple,
      FeeWithdrawnEvent.OutputObject
    >;

    "FeesUpdated(uint256,uint256)": TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;
    FeesUpdated: TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;
  };
}
